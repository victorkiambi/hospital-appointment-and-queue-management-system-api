openapi: 3.0.3
info:
  title: Medbook API
  version: 1.0.0
  description: API for hospital appointment and queue management system
servers:
  - url: http://localhost/api/v1
paths:
  /register:
    post:
      summary: Register a new user
      description: |
        Registers a new user (admin, doctor, or patient).
        
        **Doctor creation is a two-step process:**
        1. Register a user with role 'doctor' using this endpoint.
        2. Create a doctor profile using the /doctors endpoint with the returned user_id.
        
        See /doctors POST for details on the second step.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegister'
      responses:
        '201':
          description: User registered
  /login:
    post:
      summary: Login and get token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '200':
          description: Login successful
  /user:
    get:
      summary: Get current user profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: User profile
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
                  message:
                    type: string
                  errors:
                    type: object
                    nullable: true
  /doctors:
    get:
      summary: List doctors
      description: >
        Returns a list of doctors. Requires authentication via Bearer token.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of doctors
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Doctor'
                  meta:
                    type: object
                    properties:
                      total: { type: integer }
                      per_page: { type: integer }
                      current_page: { type: integer }
                      last_page: { type: integer }
                  message:
                    type: string
                  errors:
                    type: object
                    nullable: true
    post:
      summary: Create doctor profile (step 2 of doctor creation)
      description: |
        Creates a new doctor profile. Requires authentication via Bearer token (admin only).
        
        **Doctor creation is a two-step process:**
        1. Register a user with role 'doctor' using the /register endpoint.
        2. Create a doctor profile using this endpoint with the returned user_id.
        
        Alternatively, an admin can use a combined endpoint (e.g., /admin/doctors) to create both the user and doctor profile in a single request.
        
        **Validation notes:**
        - user_id must reference a user with role 'doctor'.
        - user_id must be unique in the doctors table.
        - specialization is required.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [user_id, specialization]
              properties:
                user_id: { type: integer, description: 'ID of a user with role doctor' }
                specialization: { type: string }
                availability: { type: object }
            examples:
              two_step:
                summary: Two-step approach
                value:
                  user_id: 2
                  specialization: 'Cardiology'
                  availability:
                    monday: ['09:00-12:00', '14:00-17:00']
                    tuesday: ['09:00-12:00']
              combined:
                summary: Combined admin approach
                value:
                  name: 'Dr. Jane Smith'
                  email: 'jane.smith@hospital.com'
                  password: 'securepassword'
                  specialization: 'Cardiology'
                  availability:
                    monday: ['09:00-12:00', '14:00-17:00']
      responses:
        '201':
          description: Doctor created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Doctor'
                  message:
                    type: string
                  errors:
                    type: object
                    nullable: true
        '422':
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
  /doctors/{id}:
    get:
      summary: Get doctor by ID
      description: >
        Returns a single doctor by its ID. Requires authentication via Bearer token.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Doctor details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Doctor'
                  message:
                    type: string
                  errors:
                    type: object
                    nullable: true
        '404':
          description: Doctor not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
    put:
      summary: Update doctor
      description: >
        Updates an existing doctor. Requires authentication via Bearer token (admin only).
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                specialization: { type: string }
                availability: { type: object }
            example:
              specialization: 'Neurology'
              availability:
                wednesday: ['10:00-13:00']
      responses:
        '200':
          description: Doctor updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Doctor'
                  message:
                    type: string
                  errors:
                    type: object
                    nullable: true
        '404':
          description: Doctor not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
        '422':
          description: Validation failed
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
            example:
              message: "Validation failed."
              errors:
                specialization: ["The specialization field is required."]
    delete:
      summary: Delete doctor
      description: >
        Deletes a doctor by its ID. Requires authentication via Bearer token (admin only).
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Doctor deleted
        '404':
          description: Doctor not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
  /patients:
    get:
      summary: List patients
      security:
        - bearerAuth: []
      responses:
        '200':
          description: List of patients
    post:
      summary: Create patient
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '201':
          description: Patient created
  /patients/{id}:
    get:
      summary: Get patient by ID
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Patient details
    put:
      summary: Update patient
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: Patient updated
    delete:
      summary: Delete patient
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Patient deleted
  /appointments:
    get:
      summary: List appointments (filterable)
      description: >
        Returns a list of appointments. Supports filtering by doctor_id, patient_id, status, date, date range, and search.
        Requires authentication via Bearer token.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: doctor_id
          schema:
            type: integer
          description: Filter by doctor ID
        - in: query
          name: patient_id
          schema:
            type: integer
          description: Filter by patient ID
        - in: query
          name: status
          schema:
            type: string
            enum: [scheduled, completed, cancelled]
          description: Filter by appointment status
        - in: query
          name: date
          schema:
            type: string
            format: date
            example: '2024-03-20'
          description: Filter by specific date (format: YYYY-MM-DD)
        - in: query
          name: scheduled_at_start
          schema:
            type: string
            format: date-time
            example: '2024-03-20T00:00:00Z'
          description: Filter by start date and time (format: YYYY-MM-DDThh:mm:ssZ)
        - in: query
          name: scheduled_at_end
          schema:
            type: string
            format: date-time
            example: '2024-03-21T23:59:59Z'
          description: Filter by end date and time (format: YYYY-MM-DDThh:mm:ssZ)
        - in: query
          name: search
          schema:
            type: string
          description: Search by appointment ID, patient name, or doctor name
        - in: query
          name: per_page
          schema:
            type: integer
            default: 20
          description: Number of items per page
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Appointment'
                  meta:
                    type: object
                    properties:
                      total:
                        type: integer
                        description: Total number of appointments
                      per_page:
                        type: integer
                        description: Number of items per page
                      current_page:
                        type: integer
                        description: Current page number
                      last_page:
                        type: integer
                        description: Last page number
                  message:
                    type: string
                  errors:
                    type: object
                    nullable: true
    post:
      summary: Create appointment
      description: >
        Creates a new appointment. Requires authentication via Bearer token.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
            example:
              doctor_id: 1
              patient_id: 2
              scheduled_at: '2024-06-01T10:00:00Z'
              status: scheduled
      responses:
        '201':
          description: Appointment created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Appointment'
                  message:
                    type: string
                  errors:
                    type: object
                    nullable: true
        '409':
          description: Double-booking detected
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
  /appointments/{id}:
    get:
      summary: Get appointment by ID
      description: >
        Returns a single appointment by its ID. Requires authentication via Bearer token.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Appointment details
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Appointment'
                  message:
                    type: string
                  errors:
                    type: object
                    nullable: true
        '404':
          description: Appointment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
    put:
      summary: Update appointment
      description: >
        Updates an existing appointment. Requires authentication via Bearer token.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: Appointment updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Appointment'
                  message:
                    type: string
                  errors:
                    type: object
                    nullable: true
        '404':
          description: Appointment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
    delete:
      summary: Delete appointment
      description: >
        Deletes an appointment by its ID. Requires authentication via Bearer token.
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Appointment deleted
        '404':
          description: Appointment not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
  /queues:
    get:
      summary: List queue entries
      description: >
        Returns a list of queue entries. Supports filtering by doctor_id as a query parameter. Requires authentication via Bearer token.
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: doctor_id
          schema:
            type: integer
          description: Filter by doctor ID
      responses:
        '200':
          description: List of queue entries
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Queue'
                  message:
                    type: string
                  errors:
                    type: object
                    nullable: true
    post:
      summary: Add to queue
      description: >
        Adds a patient to a doctor's queue. Requires authentication via Bearer token.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Queue'
            example:
              doctor_id: 1
              patient_id: 2
      responses:
        '201':
          description: Queue entry created
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Queue'
                  message:
                    type: string
                  errors:
                    type: object
                    nullable: true
        '409':
          description: Patient is already in the queue for this doctor
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  errors:
                    type: object
    /queues/{id}:
      get:
        summary: Get queue entry by ID
        description: >
          Returns a single queue entry by its ID. Requires authentication via Bearer token.
        security:
          - bearerAuth: []
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: integer
        responses:
          '200':
            description: Queue entry details
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Queue'
                    message:
                      type: string
                    errors:
                      type: object
                      nullable: true
          '404':
            description: Queue entry not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    errors:
                      type: object
      put:
        summary: Update queue entry
        description: >
          Updates an existing queue entry. Requires authentication via Bearer token.
        security:
          - bearerAuth: []
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: integer
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Queue'
        responses:
          '200':
            description: Queue entry updated
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    data:
                      $ref: '#/components/schemas/Queue'
                    message:
                      type: string
                    errors:
                      type: object
                      nullable: true
          '404':
            description: Queue entry not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    errors:
                      type: object
      delete:
        summary: Delete queue entry
        description: >
          Deletes a queue entry by its ID. Requires authentication via Bearer token.
        security:
          - bearerAuth: []
        parameters:
          - in: path
            name: id
            required: true
            schema:
              type: integer
        responses:
          '204':
            description: Queue entry deleted
          '404':
            description: Queue entry not found
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                    errors:
                      type: object
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UserRegister:
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        password:
          type: string
        password_confirmation:
          type: string
        role:
          type: string
          enum: [admin, doctor, patient]
    UserLogin:
      type: object
      properties:
        email:
          type: string
        password:
          type: string
    User:
      type: object
      properties:
        id: { type: integer }
        name: { type: string }
        email: { type: string }
        role: { type: string, enum: [admin, doctor, patient] }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    Doctor:
      type: object
      properties:
        id: { type: integer }
        user: { $ref: '#/components/schemas/User' }
        specialization: { type: string }
        availability: { type: object }
        created_at: { type: string, format: date-time }
        updated_at: { type: string, format: date-time }
    Patient:
      type: object
      properties:
        user_id:
          type: integer
        medical_record_number:
          type: string
    Appointment:
      type: object
      properties:
        doctor_id:
          type: integer
        patient_id:
          type: integer
        scheduled_at:
          type: string
          format: date-time
        status:
          type: string
          enum: [scheduled, completed, cancelled]
    Queue:
      type: object
      properties:
        doctor_id:
          type: integer
        patient_id:
          type: integer
        position:
          type: integer
        status:
          type: string
          enum: [waiting, called, completed, cancelled]
        called_at:
          type: string
          format: date-time 